{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["size","checkNeighbours","mouse_enter_handler","e","target","style","backgroundColor","mouse_leave_handler","App","useState","rows","i","push","Array","from","Math","random","random_init_grids","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","j_new","setTimeout","valueRef","value","setValue","textAlign","href","justifyContent","display","gridTemplateColumns","map","col","onClick","newGrid","onMouseEnter","onMouseLeave","width","height","border","alignItems","random_grids","initialized_grids","onChange","changeEvent","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee9a989.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nconst size = 50;\n\nvar population = 0;\n\nconst checkNeighbours = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction mouse_enter_handler(e) {\n  if (e.target.style.backgroundColor === 'white') {\n    e.target.style.backgroundColor = 'grey';\n  }\n}\n\nfunction mouse_leave_handler(e) {\n  if (e.target.style.backgroundColor === 'grey') {\n    e.target.style.backgroundColor = 'white';\n  }\n}\n\nconst random_init_grids = () => {\n  const rows = [];\n  for (let i = 0; i < size; i++) {\n    rows.push(Array.from(Array(size), () => (Math.random() > 0.5 ? 1 : 0)));\n  }\n\n  return rows;\n};\n\nconst initialized_grids = () => {\n  const rows = [];\n  for (let i = 0; i < size; i++) {\n    rows.push(Array.from(Array(size), () => 0));\n  }\n\n  return rows;\n};\n\n\nfunction App() {\n  \n  const [grid, setGrid] = useState(() => {\n    return random_init_grids();\n  });\n\n  const random_grids = () => {\n    const rows = [];\n    for (let i = 0; i < size; i++) {\n      rows.push(\n        Array.from(Array(size), () => (Math.random() > 0.5 ? 1 : 0))\n      );\n    }\n    // var next_pop = 0;\n    for (let i = 0; i < size; i++) {\n      for (let k = 0; k < size; k++) {\n        // next_pop += rows[i][k];\n      }\n    }\n    // population = next_pop;\n    setGrid(rows);\n  }\n\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    // var next_pop = population;\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < size; i++) {\n          for (let k = 0; k < size; k++) {\n            let neighbors = 0;\n            checkNeighbours.forEach(([x, y]) => {\n              const i_new = i + x;\n              const j_new = k + y;\n              neighbors += g[((i_new % size) + size) % size][((j_new % size) + size) % size];\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              // if (gridCopy[i][k] === 1) next_pop--;\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n              // next_pop++;\n            }\n            \n          }\n        }\n      });\n    });\n    // population = next_pop;\n\n    setTimeout(runSimulation, 1000/(valueRef.current / 50));\n  }, []);\n\n\n  const [ value, setValue ] = useState(50); \n  const valueRef = useRef(value);\n  valueRef.current = value;\n  return (\n    <div\n      style={{\n        textAlign: \"center\"\n      }}>\n\n      <h1>Conway's Game of Life</h1>\n      <a \n      href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\n        Game information\n      </a>\n      <div\n        style={{\n          justifyContent: \"center\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${size}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              onMouseEnter={mouse_enter_handler}\n              onMouseLeave={mouse_leave_handler}\n              style={{\n                width: 18,\n                height: 18,\n                backgroundColor: grid[i][k] ? \"green\" : \"white\",\n                border: \"solid 1px grey\"\n              }}\n            />\n          ))\n        )}\n        </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"stop\" : \"start\"}\n        </button>\n        <button\n          onClick={() => {\n            random_grids();\n          }}\n        >\n          random\n        </button>\n        <button\n          onClick={() => {\n            setGrid(initialized_grids());\n            // population = 0;\n          }}\n        >\n          clear\n        </button>\n        \n        \n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n      Simulation Speed:<RangeSlider\n          value={value}\n          onChange={changeEvent => setValue(changeEvent.target.value)}\n          min={50}\n          max={1000}\n        />\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n      >\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}